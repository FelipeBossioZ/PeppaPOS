' ==================================================
' MÓDULO DE AJUSTE DE INVENTARIO - VERSIÓN OPTIMIZADA
' 10x más rápido para inventarios masivos
' ==================================================

Option Explicit

' === VARIABLES GLOBALES ===
Dim wsProductos As Worksheet
Dim filaActual As Long
Dim CacheProductos As Object ' Dictionary para búsqueda instantánea
Dim ProductosCargados As Boolean
' --- ALTA RÁPIDA / CREAR-EDITAR EN HOJA1 Y CACHE ---
Private Function AltaRapida_Upsert(ByVal codigo As String, _
                                   ByVal nombre As String, _
                                   ByVal costo As Double, _
                                   ByVal precio As Double, _
                                   ByVal stock As Long, _
                                   ByVal unidad As String) As Long
    Dim r As Range, f As Long

    If Len(Trim$(codigo)) = 0 Then Exit Function

    Set r = wsProductos.Columns(1).Find(What:=codigo, LookIn:=xlValues, LookAt:=xlWhole)
    If r Is Nothing Then
        f = wsProductos.Cells(wsProductos.Rows.Count, "A").End(xlUp).Row + 1
        wsProductos.Cells(f, 1).Value = codigo
        wsProductos.Cells(f, 2).Value = IIf(nombre = "", "PRODUCTO " & codigo, nombre)
        wsProductos.Cells(f, 3).Value = IIf(unidad = "", "UND", unidad)
        wsProductos.Cells(f, 4).Value = Val(costo)
        wsProductos.Cells(f, 5).Value = Val(stock)
        wsProductos.Cells(f, 6).Value = Val(precio)
        wsProductos.Cells(f, 15).Value = "Alta rápida: " & Format(Now, "dd/mm HH:nn")
    Else
        f = r.Row
        If nombre <> "" Then wsProductos.Cells(f, 2).Value = nombre
        If unidad <> "" Then wsProductos.Cells(f, 3).Value = unidad
        If costo >= 0 Then wsProductos.Cells(f, 4).Value = Val(costo)
        If precio >= 0 Then wsProductos.Cells(f, 6).Value = Val(precio)
        wsProductos.Cells(f, 5).Value = Val(stock)              ' fijar stock para inventario físico
        wsProductos.Cells(f, 15).Value = "Actualizado: " & Format(Now, "dd/mm HH:nn")
    End If

    ' --- actualizar cache local ---
    Dim prod(0 To 6) As Variant
    prod(0) = wsProductos.Cells(f, 2).Value ' nombre
    prod(1) = wsProductos.Cells(f, 3).Value ' unidad
    prod(2) = Val(wsProductos.Cells(f, 4).Value) ' costo
    prod(3) = Val(wsProductos.Cells(f, 5).Value) ' stock
    prod(4) = Val(wsProductos.Cells(f, 6).Value) ' pventa
    prod(5) = f                                  ' fila
    prod(6) = True

    If CacheProductos.Exists(codigo) Then
        CacheProductos(codigo) = prod
    Else
        CacheProductos.Add codigo, prod
    End If
    ' clave por nombre (opcional)
    On Error Resume Next
    If Not CacheProductos.Exists("NOMBRE_" & UCase(prod(0))) Then
        CacheProductos.Add "NOMBRE_" & UCase(prod(0)), codigo
    End If
    On Error GoTo 0

    ' --- refrescar POS si está abierto ---
    On Error Resume Next
    Dim frm As Object
    For Each frm In VBA.UserForms
        If frm.Name = "frmPOS" Then frm.RefrescarCatalogo
    Next frm
    On Error GoTo 0

    AltaRapida_Upsert = f
End Function



Private Sub UserForm_Initialize()
    On Error GoTo ErrorHandler
    
    Set wsProductos = ThisWorkbook.Sheets("Hoja1")
    Set CacheProductos = CreateObject("Scripting.Dictionary")
    ProductosCargados = False
    
    Me.Caption = "AJUSTE DE INVENTARIO - VERSIÓN RÁPIDA"
    Me.Width = 650
    Me.Height = 500
    
    ' Configurar lista
    With Me.lstProductosAjuste
        .ColumnCount = 6
        .ColumnWidths = "60;200;60;60;60;60"
    End With
    
    ' Cargar tipos de ajuste
    With Me.cmbTipoAjuste
        .AddItem "Ajuste Manual"
        .AddItem "Entrada"
        .AddItem "Salida"
        .AddItem "Corrección"
        .AddItem "Merma"
        .AddItem "Devolución"
        .AddItem "Inventario Físico"
        .ListIndex = 0
    End With
    
    ' Cargar unidades
    With Me.cmbUnidadAjuste
        .AddItem "UND"
        .AddItem "CAJA"
        .AddItem "SOBRE"
        .AddItem "TABLETA"
        .AddItem "POTE"
        .AddItem "FRASCO"
        .AddItem "BLISTER"
        .ListIndex = 0
    End With
    
    ' Bloquear código
    Me.txtCodigoAjuste.Locked = True
    Me.txtCodigoAjuste.BackColor = RGB(240, 240, 240)
    
    ' === CARGAR PRODUCTOS EN MEMORIA (CLAVE DE LA VELOCIDAD) ===
    Application.StatusBar = "Cargando inventario en memoria..."
    Call CargarProductosEnCache
    Application.StatusBar = "Sistema listo - " & CacheProductos.Count & " productos cargados"
    
    ' Cargar lista inicial
    Call MostrarProductosEnLista("")
    HabilitarControles False
    
    ' Enfocar en búsqueda
    Me.txtBuscarAjuste.SetFocus
    
    Exit Sub
ErrorHandler:
    MsgBox "Error inicializando: " & Err.Description, vbCritical
End Sub

' ==================================================
' CARGA ULTRA RÁPIDA EN MEMORIA
' ==================================================
Sub CargarProductosEnCache()
    On Error GoTo ErrorHandler
    
    Application.ScreenUpdating = False
    CacheProductos.RemoveAll
    
    Dim ultimaFila As Long
    ultimaFila = wsProductos.Cells(wsProductos.Rows.Count, "A").End(xlUp).Row
    
    If ultimaFila < 3 Then
        ProductosCargados = False
        Exit Sub
    End If
    
    ' === CARGAR TODO DE UNA VEZ (SUPER RÁPIDO) ===
    Dim rangoCompleto As Variant
    rangoCompleto = wsProductos.Range("A3:F" & ultimaFila).Value
    
    Dim i As Long
    Dim codigo As String
    Dim datosProducto(0 To 6) As Variant
    
    For i = 1 To UBound(rangoCompleto, 1)
        codigo = Trim(CStr(rangoCompleto(i, 1)))
        
        If codigo <> "" Then
            ' Guardar todos los datos en memoria
            datosProducto(0) = IIf(rangoCompleto(i, 2) = "", "PRODUCTO " & codigo, rangoCompleto(i, 2)) ' Nombre
            datosProducto(1) = IIf(rangoCompleto(i, 3) = "", "UND", rangoCompleto(i, 3)) ' Unidad
            datosProducto(2) = IIf(IsNumeric(rangoCompleto(i, 4)), rangoCompleto(i, 4), 0) ' Costo
            datosProducto(3) = IIf(IsNumeric(rangoCompleto(i, 5)), rangoCompleto(i, 5), 0) ' Stock
            datosProducto(4) = IIf(IsNumeric(rangoCompleto(i, 6)), rangoCompleto(i, 6), 0) ' P.Venta
            datosProducto(5) = i + 2 ' Fila en Excel
            datosProducto(6) = False ' Bandera de modificado
            
            ' Agregar al diccionario con código como clave
            If Not CacheProductos.Exists(codigo) Then
                CacheProductos.Add codigo, datosProducto
            End If
            
            ' También agregar con nombre como clave alternativa para búsqueda
            Dim nombreKey As String
            nombreKey = "NOMBRE_" & UCase(datosProducto(0))
            If Not CacheProductos.Exists(nombreKey) Then
                On Error Resume Next ' Añadido para ignorar errores de nombres duplicados
                CacheProductos.Add nombreKey, codigo ' Referencia al código
                On Error GoTo ErrorHandler ' Restaurar manejador de errores principal
            End If
        End If
    Next i
    
    ProductosCargados = True
    Application.ScreenUpdating = True
    
    Exit Sub
ErrorHandler:
    Application.ScreenUpdating = True
    MsgBox "Error cargando cache: " & Err.Description, vbCritical
End Sub

' ==================================================
' BÚSQUEDA INSTANTÁNEA
' ==================================================
Private Sub txtBuscarAjuste_Change()
    Dim q As String
    q = Trim$(Me.txtBuscarAjuste.Text)

    ' Pinta la lista
    MostrarProductosEnLista q

    ' ---- detectar "no hay resultados" de forma segura ----
    Dim hayDatos As Boolean
    hayDatos = False
    If Me.lstProductosAjuste.ListCount > 1 Then
        ' hay al menos una fila de datos si la col 0 (código) tiene algo
        hayDatos = (Len(CStr(Me.lstProductosAjuste.List(1, 0) & "")) > 0)
    End If

    ' Este código se moverá al evento KeyPress para activarse solo con Enter
    ' If Len(q) > 0 And Not hayDatos Then
    '     ' nada encontrado -> pasar a ALTA RÁPIDA
    '     Me.lstProductosAjuste.ListIndex = -1   ' evita selección fantasma
    '     PrepararAltaRapida q                   ' habilita controles y rellena COD
    ' End If
End Sub



Sub MostrarProductosEnLista(textoBusqueda As String)
    On Error Resume Next
    
    Me.lstProductosAjuste.Clear
    
    ' Encabezados
    Me.lstProductosAjuste.AddItem
    With Me.lstProductosAjuste
        .List(0, 0) = "CÓDIGO"
        .List(0, 1) = "PRODUCTO"
        .List(0, 2) = "STOCK"
        .List(0, 3) = "COSTO"
        .List(0, 4) = "P.VENTA"
        .List(0, 5) = "UNIDAD"
    End With
    
    If Not ProductosCargados Then Exit Sub
    
    Dim busquedaUpper As String
    busquedaUpper = UCase(Trim(textoBusqueda))
    
    Dim key As Variant
    Dim producto As Variant
    Dim mostrados As Integer
    mostrados = 0
    
    ' Buscar en el cache (INSTANTÁNEO)
    For Each key In CacheProductos.Keys
        ' Saltar las claves de nombre
        If Not Left(key, 7) = "NOMBRE_" Then
            producto = CacheProductos(key)
            
            ' Buscar por código o nombre
            If busquedaUpper = "" Or _
               InStr(1, UCase(key), busquedaUpper) > 0 Or _
               InStr(1, UCase(producto(0)), busquedaUpper) > 0 Then
                
                Me.lstProductosAjuste.AddItem
                Dim idx As Integer
                idx = Me.lstProductosAjuste.ListCount - 1
                
                With Me.lstProductosAjuste
                    .List(idx, 0) = key ' Código
                    .List(idx, 1) = producto(0) ' Nombre
                    .List(idx, 2) = producto(3) ' Stock
                    .List(idx, 3) = "$" & Format(producto(2), "0") ' Costo sin decimales
                    .List(idx, 4) = "$" & Format(producto(4), "0") ' P.Venta sin decimales
                    .List(idx, 5) = producto(1) ' Unidad
                End With
                
                mostrados = mostrados + 1
                
                ' Limitar a 100 resultados para no saturar
                If mostrados >= 100 Then Exit For
            End If
        End If
    Next key
    
    ' Si no hay resultados
    If mostrados = 0 And busquedaUpper <> "" Then
        Me.lstProductosAjuste.AddItem
        Me.lstProductosAjuste.List(1, 1) = "No se encontraron productos"
    End If
End Sub
' prepara el formulario para crear el producto que se está buscando
Private Sub PrepararAltaRapida(ByVal codigo As String)
    filaActual = 0

    ' Habilitar campos para nueva creación
    HabilitarControles True

    ' Desbloquear el campo COD por si el escáner metió espacios/ceros extra
    Me.txtCodigoAjuste.Locked = False

    ' Semillas
    Me.txtCodigoAjuste.Text = codigo
    Me.txtNombreAjuste.Text = ""
    Me.txtStockActual.Text = "0"
    Me.txtNuevoStock.Text = ""
    Me.txtCostoActual.Text = "0"
    Me.txtNuevoCosto.Text = ""
    Me.txtPrecioActual.Text = "0"
    Me.txtNuevoPrecio.Text = ""
    Me.cmbUnidadAjuste.Text = "UND"

    ' Enfocar para escribir nombre y avanzar rápido
    Me.txtNombreAjuste.SetFocus

    ' UI
    Application.StatusBar = "Código no existe ? Alta rápida lista (nombre, precio, stock y Enter)."
End Sub




' ==================================================
' SELECCIÓN Y CARGA DE PRODUCTO
' ==================================================
Private Sub lstProductosAjuste_Click()
    If Me.lstProductosAjuste.ListIndex <= 0 Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    Dim codigoSeleccionado As String
    codigoSeleccionado = Me.lstProductosAjuste.List(Me.lstProductosAjuste.ListIndex, 0)
    
    ' Obtener del cache (INSTANTÁNEO)
    If CacheProductos.Exists(codigoSeleccionado) Then
        Dim producto As Variant
        producto = CacheProductos(codigoSeleccionado)
        
        filaActual = producto(5) ' Fila en Excel
        
        ' Cargar datos en los controles
        Me.txtCodigoAjuste.Text = codigoSeleccionado
        Me.txtNombreAjuste.Text = producto(0)
        Me.txtStockActual.Text = Int(producto(3))
        Me.txtNuevoStock.Text = Int(producto(3))
        Me.txtCostoActual.Text = Int(producto(2))
        Me.txtNuevoCosto.Text = Int(producto(2))
        Me.txtPrecioActual.Text = Int(producto(4))
        Me.txtNuevoPrecio.Text = Int(producto(4))
        Me.cmbUnidadAjuste.Text = producto(1)
        
        HabilitarControles True
        Me.txtNuevoStock.SetFocus
        Me.txtNuevoStock.SelStart = 0
        Me.txtNuevoStock.SelLength = Len(Me.txtNuevoStock.Text)
    End If
    
    Exit Sub
ErrorHandler:
    MsgBox "Error seleccionando producto: " & Err.Description, vbExclamation
End Sub

' ==================================================
' GUARDADO OPTIMIZADO
' ==================================================
Private Sub btnGuardarAjuste_Click()
    ' Si no hay filaActual, estamos en ALTA RÁPIDA
    Dim esAlta As Boolean: esAlta = (filaActual = 0)

    If esAlta Then
        If Len(Trim$(Me.txtCodigoAjuste.Text)) = 0 Then
            MsgBox "Falta CÓDIGO (escanee o escriba).", vbExclamation: Exit Sub
        End If
        If Len(Trim$(Me.txtNombreAjuste.Text)) = 0 Then
            MsgBox "Falta NOMBRE del producto.", vbExclamation: Exit Sub
        End If
        If Not IsNumeric(Me.txtNuevoPrecio.Text) Or Val(Me.txtNuevoPrecio.Text) < 0 Then
            MsgBox "Ingrese PRECIO de venta válido.", vbExclamation: Exit Sub
        End If
        If Not IsNumeric(Me.txtNuevoStock.Text) Then
            MsgBox "Ingrese STOCK válido (número).", vbExclamation: Exit Sub
        End If
    Else
        ' validaciones normales cuando existe
        If Me.cmbTipoAjuste.Text <> "Inventario Físico" And Me.txtMotivo.Text = "" Then
            MsgBox "Ingrese el motivo del ajuste", vbExclamation: Exit Sub
        End If
        If Val(Me.txtStockActual.Text) = Val(Me.txtNuevoStock.Text) And _
           Val(Me.txtCostoActual.Text) = Val(Me.txtNuevoCosto.Text) And _
           Val(Me.txtPrecioActual.Text) = Val(Me.txtNuevoPrecio.Text) Then
           MsgBox "No hay cambios para guardar", vbInformation: Exit Sub
        End If
    End If

    Dim confirmar As VbMsgBoxResult
    confirmar = MsgBox(IIf(esAlta, "¿Crear producto nuevo?", "¿Guardar cambios del producto?"), _
                        vbYesNo + vbQuestion, "Confirmar")
    If confirmar <> vbYes Then Exit Sub

    Application.ScreenUpdating = False

    If esAlta Then
        ' --- CREAR ---
        Dim f As Long
        f = AltaRapida_Upsert( _
                Trim$(Me.txtCodigoAjuste.Text), _
                Trim$(Me.txtNombreAjuste.Text), _
                Val(Me.txtNuevoCosto.Text), _
                Val(Me.txtNuevoPrecio.Text), _
                CLng(Val(Me.txtNuevoStock.Text)), _
                Me.cmbUnidadAjuste.Text)
        filaActual = f
    Else
        ' --- AJUSTAR EXISTENTE ---
        With wsProductos
            .Cells(filaActual, 2).Value = Me.txtNombreAjuste.Text
            .Cells(filaActual, 3).Value = Me.cmbUnidadAjuste.Text
            .Cells(filaActual, 4).Value = Val(Me.txtNuevoCosto.Text)
            .Cells(filaActual, 5).Value = Val(Me.txtNuevoStock.Text)
            .Cells(filaActual, 6).Value = Val(Me.txtNuevoPrecio.Text)
            .Cells(filaActual, 13).Value = "Ajuste: " & Format(Now, "dd/mm hh:mm")
            .Cells(filaActual, 14).Value = Me.cmbTipoAjuste.Text & " - " & Me.txtMotivo.Text
        End With

        ' empujar a cache local
        Dim codigo As String, producto As Variant
        codigo = Me.txtCodigoAjuste.Text
        If CacheProductos.Exists(codigo) Then
            producto = CacheProductos(codigo)
            producto(0) = Me.txtNombreAjuste.Text
            producto(1) = Me.cmbUnidadAjuste.Text
            producto(2) = Val(Me.txtNuevoCosto.Text)
            producto(3) = Val(Me.txtNuevoStock.Text)
            producto(4) = Val(Me.txtNuevoPrecio.Text)
            producto(6) = True
            CacheProductos(codigo) = producto
        End If
    End If

    Application.ScreenUpdating = True

    ' refrescar lista y limpiar para el siguiente
    Call MostrarProductosEnLista("")

    ' --- INICIO: Refresco del POS en tiempo real ---
    On Error Resume Next ' Si frmPOS no está abierto, simplemente continúa
    Dim frm As Object
    Set frm = VBA.UserForms("frmPOS")
    If Not frm Is Nothing Then
        frm.RefrescarCatalogo
    End If
    On Error GoTo 0
    ' --- FIN: Refresco del POS ---

    Call LimpiarParaSiguiente
    Application.StatusBar = "[OK] " & IIf(esAlta, "Creado", "Guardado") & " ?"
 

    
    
        
        Call modSincronizacion.RefrescarPOS
        
        
        ' Registrar en auditoría si existe
        On Error Resume Next
        Call RegistrarAjusteEnAuditoria(Me.cmbTipoAjuste.Text, Me.txtMotivo.Text)
        On Error GoTo 0
        
        Application.ScreenUpdating = True
        
        ' Mensaje breve
        Application.StatusBar = "[OK] Guardado: " & Me.txtNombreAjuste.Text
        
        ' Limpiar y continuar
        Call LimpiarParaSiguiente
        
        
        
    
End Sub

' ==================================================
' INVENTARIO RÁPIDO POR LOTES
' ==================================================
Private Sub btnInventarioRapido_Click()
    Dim modo As VbMsgBoxResult
    modo = MsgBox("MODO INVENTARIO RÁPIDO" & vbCrLf & vbCrLf & _
                  "¿Cómo desea proceder?" & vbCrLf & vbCrLf & _
                  "SI = Modo Scanner (código por código)" & vbCrLf & _
                  "NO = Actualizar múltiples a la vez", _
                  vbYesNoCancel + vbQuestion, "Inventario Rápido")
    
    If modo = vbYes Then
        Call ModoInventarioScanner
    ElseIf modo = vbNo Then
        Call ModoInventarioMultiple
    End If
End Sub

Sub ModoInventarioScanner()
    Dim continuar As Boolean
    continuar = True
    
    Dim cambios As Long
    cambios = 0
    
    Do While continuar
        Dim codigo As String
        codigo = InputBox("Escanee o escriba el código:" & vbCrLf & _
                         "(Deje vacío o escriba FIN para terminar)", _
                         "Inventario Scanner", "")
        
        If codigo = "" Or UCase(codigo) = "FIN" Then
            continuar = False
        ElseIf CacheProductos.Exists(codigo) Then
            Dim producto As Variant
            producto = CacheProductos(codigo)
            
            Dim stockActual As Long
            stockActual = producto(3)
            
            Dim nuevoStock As String
            nuevoStock = InputBox("Producto: " & producto(0) & vbCrLf & vbCrLf & _
                                 "Stock sistema: " & stockActual & vbCrLf & _
                                 "Ingrese cantidad real:", _
                                 "Ajustar Stock", stockActual)
            
            If nuevoStock <> "" And IsNumeric(nuevoStock) Then
                ' Actualizar cache
                producto(3) = CLng(nuevoStock)
                producto(6) = True ' Marcado para guardar
                CacheProductos(codigo) = producto
                cambios = cambios + 1
                
                ' Actualizar Excel inmediatamente
                wsProductos.Cells(producto(5), 5).Value = CLng(nuevoStock)
                
                Application.StatusBar = "Actualizados: " & cambios & " productos"
            End If
        Else
            MsgBox "Código no encontrado: " & codigo, vbExclamation
        End If
    Loop
    
    If cambios > 0 Then
        MsgBox "Inventario completado" & vbCrLf & _
               "Productos actualizados: " & cambios, vbInformation
    End If
    
    Application.StatusBar = ""
    Call MostrarProductosEnLista("")
End Sub

Sub ModoInventarioMultiple()
    ' Crear un formulario temporal con lista de cambios pendientes
    MsgBox "Función en desarrollo" & vbCrLf & vbCrLf & _
           "Use el modo Scanner por ahora", vbInformation
End Sub

' ==================================================
' FUNCIONES AUXILIARES
' ==================================================
Sub HabilitarControles(habilitar As Boolean)
    Me.txtNombreAjuste.Enabled = habilitar
    Me.txtNuevoStock.Enabled = habilitar
    Me.txtNuevoCosto.Enabled = habilitar
    Me.txtNuevoPrecio.Enabled = habilitar
    Me.cmbUnidadAjuste.Enabled = habilitar
    Me.cmbTipoAjuste.Enabled = habilitar
    Me.txtMotivo.Enabled = habilitar
    Me.btnGuardarAjuste.Enabled = habilitar
    
    If habilitar Then
        Me.txtNombreAjuste.BackColor = RGB(255, 255, 255)
        Me.txtNuevoStock.BackColor = RGB(255, 255, 230) ' Amarillo claro para destacar
        Me.txtNuevoCosto.BackColor = RGB(255, 255, 255)
        Me.txtNuevoPrecio.BackColor = RGB(255, 255, 255)
    Else
        Me.txtNombreAjuste.BackColor = RGB(240, 240, 240)
        Me.txtNuevoStock.BackColor = RGB(240, 240, 240)
        Me.txtNuevoCosto.BackColor = RGB(240, 240, 240)
        Me.txtNuevoPrecio.BackColor = RGB(240, 240, 240)
    End If
End Sub

Sub LimpiarFormularioAjuste()
    Me.txtCodigoAjuste.Text = ""
    Me.txtNombreAjuste.Text = ""
    Me.txtStockActual.Text = ""
    Me.txtNuevoStock.Text = ""
    Me.txtCostoActual.Text = ""
    Me.txtNuevoCosto.Text = ""
    Me.txtPrecioActual.Text = ""
    Me.txtNuevoPrecio.Text = ""
    Me.cmbUnidadAjuste.ListIndex = 0
    Me.cmbTipoAjuste.ListIndex = 0
    Me.txtMotivo.Text = ""
    filaActual = 0
    HabilitarControles False
    Me.txtBuscarAjuste.SetFocus
End Sub

Sub LimpiarParaSiguiente()
    ' Limpieza rápida para continuar con el siguiente producto
    Me.txtCodigoAjuste.Text = ""
    Me.txtNombreAjuste.Text = ""
    Me.txtStockActual.Text = ""
    Me.txtNuevoStock.Text = ""
    Me.txtCostoActual.Text = ""
    Me.txtNuevoCosto.Text = ""
    Me.txtPrecioActual.Text = ""
    Me.txtNuevoPrecio.Text = ""
    filaActual = 0
    HabilitarControles False
    
    ' Mantener el tipo de ajuste y motivo para agilizar
    ' Me.cmbTipoAjuste se mantiene
    ' Me.txtMotivo se mantiene
    
    ' Volver al foco de búsqueda
    Me.txtBuscarAjuste.Text = ""
    Me.txtBuscarAjuste.SetFocus
End Sub

Private Sub btnCancelarAjuste_Click()
    Call LimpiarFormularioAjuste
End Sub

Private Sub btnCerrarAjuste_Click()
    ' Verificar si hay cambios pendientes
    Dim hayPendientes As Boolean
    Dim key As Variant
    
    For Each key In CacheProductos.Keys
        If Not Left(key, 7) = "NOMBRE_" Then
            Dim producto As Variant
            producto = CacheProductos(key)
            If producto(6) = True Then ' Si está marcado como modificado
                hayPendientes = True
                Exit For
            End If
        End If
    Next key
    
    If hayPendientes Then
        If MsgBox("Hay cambios pendientes. ¿Salir de todos modos?", _
                  vbYesNo + vbQuestion) = vbNo Then
            Exit Sub
        End If
    End If
    
    Application.StatusBar = ""
    Unload Me
End Sub

' ==================================================
' ATAJOS DE TECLADO
' ==================================================
Private Sub UserForm_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    Select Case KeyCode
        Case vbKeyF2 ' F2 para enfocar en búsqueda
            Me.txtBuscarAjuste.SetFocus
            
        Case vbKeyF5 ' F5 para recargar
            Call CargarProductosEnCache
            Call MostrarProductosEnLista("")
            
        Case vbKeyF9 ' F9 para inventario rápido
            Call btnInventarioRapido_Click
            
        Case vbKeyEscape ' ESC para limpiar
            Call LimpiarFormularioAjuste
    End Select
End Sub

' ==================================================
' VALIDACIÓN DE ENTRADA
' ==================================================
Private Sub txtNuevoStock_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    ' Solo números
    If Not (KeyAscii >= 48 And KeyAscii <= 57) And KeyAscii <> 8 Then
        KeyAscii = 0
    End If
    
    ' Enter para guardar
    If KeyAscii = 13 Then
        Call btnGuardarAjuste_Click
        KeyAscii = 0
    End If
End Sub

Private Sub txtNuevoCosto_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If Not (KeyAscii >= 48 And KeyAscii <= 57) And KeyAscii <> 8 Then
        KeyAscii = 0
    End If
End Sub

Private Sub txtNuevoPrecio_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If Not (KeyAscii >= 48 And KeyAscii <= 57) And KeyAscii <> 8 Then
        KeyAscii = 0
    End If
End Sub

' ==================================================
' FUNCIONES DE AUDITORÍA (Simplificadas)
' ==================================================
Sub RegistrarAjusteEnAuditoria(tipoAjuste As String, motivo As String)
    On Error GoTo ErrorHandler
    
    Dim wsAudit As Worksheet
    Dim contraseña As String
    contraseña = "delta85123"
    
    ' Verificar si existe la hoja
    On Error Resume Next
    Set wsAudit = ThisWorkbook.Sheets("Auditoria_Ajustes")
    On Error GoTo ErrorHandler
    
    If wsAudit Is Nothing Then
        ' Crear la hoja si no existe
        Set wsAudit = ThisWorkbook.Sheets.Add
        wsAudit.Name = "Auditoria_Ajustes"
        
        ' Crear encabezados
        With wsAudit.Range("A1:O1")
            .Value = Array("ID", "Fecha", "Hora", "Usuario", "Tipo Ajuste", _
                          "Código", "Producto", "Stock Anterior", "Stock Nuevo", _
                          "Costo Anterior", "Costo Nuevo", "P.Venta Anterior", _
                          "P.Venta Nuevo", "Motivo", "Observaciones")
            .Font.Bold = True
            .Interior.Color = RGB(200, 200, 200)
        End With
    End If
    
    ' Desproteger temporalmente
    On Error Resume Next
    wsAudit.Unprotect password:=contraseña
    On Error GoTo ErrorHandler
    
    ' Encontrar última fila
    Dim ultimaFila As Long
    ultimaFila = wsAudit.Cells(wsAudit.Rows.Count, "A").End(xlUp).Row + 1
    
    ' REGISTRAR LOS DATOS
    With wsAudit
        .Cells(ultimaFila, 1).Value = "AJ-" & Format(ultimaFila - 1, "00000")
        .Cells(ultimaFila, 2).Value = Date
        .Cells(ultimaFila, 3).Value = Time
        .Cells(ultimaFila, 4).Value = Application.UserName
        .Cells(ultimaFila, 5).Value = tipoAjuste
        .Cells(ultimaFila, 6).Value = Me.txtCodigoAjuste.Text
        .Cells(ultimaFila, 7).Value = Me.txtNombreAjuste.Text
        .Cells(ultimaFila, 8).Value = Val(Me.txtStockActual.Text)
        .Cells(ultimaFila, 9).Value = Val(Me.txtNuevoStock.Text)
        .Cells(ultimaFila, 10).Value = Val(Me.txtCostoActual.Text)
        .Cells(ultimaFila, 11).Value = Val(Me.txtNuevoCosto.Text)
        .Cells(ultimaFila, 12).Value = Val(Me.txtPrecioActual.Text)
        .Cells(ultimaFila, 13).Value = Val(Me.txtNuevoPrecio.Text)
        .Cells(ultimaFila, 14).Value = motivo
        
        ' Calcular diferencias
        Dim difStock As Long
        difStock = Val(Me.txtNuevoStock.Text) - Val(Me.txtStockActual.Text)
        
        .Cells(ultimaFila, 15).Value = "Stock: " & IIf(difStock >= 0, "+", "") & difStock
    End With
    
    ' Proteger de nuevo
    On Error Resume Next
    wsAudit.Protect password:=contraseña
    
    Exit Sub
    
ErrorHandler:
    ' Si hay error, al menos intentar registrar sin protección
    Debug.Print "Error en auditoría: " & Err.Description
End Sub

' ==================================================
' ESTADÍSTICAS DEL SISTEMA
' ==================================================
Private Sub btnEstadisticas_Click()
    Dim mensaje As String
    mensaje = "ESTADÍSTICAS DEL SISTEMA" & vbCrLf & vbCrLf
    mensaje = mensaje & "Productos en memoria: " & (CacheProductos.Count / 2) & vbCrLf
    mensaje = mensaje & "Velocidad de búsqueda: < 0.1 segundos" & vbCrLf
    mensaje = mensaje & "Memoria usada: ~" & Format((CacheProductos.Count * 100) / 1024, "0.0") & " KB" & vbCrLf & vbCrLf
    
    ' Contar productos modificados
    Dim modificados As Long
    Dim key As Variant
    For Each key In CacheProductos.Keys
        If Not Left(key, 7) = "NOMBRE_" Then
            Dim producto As Variant
            producto = CacheProductos(key)
            If producto(6) = True Then modificados = modificados + 1
        End If
    Next key
    
    mensaje = mensaje & "Productos modificados en sesión: " & modificados
    
    MsgBox mensaje, vbInformation, "Estadísticas"
End Sub

Private Sub txtBuscarAjuste_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    ' Si se presiona Enter
    If KeyAscii = 13 Then
        ' Llamar a la lógica de verificación
        Call VerificarYPrepararAltaRapida
        ' Cancelar el sonido de "beep" del Enter para que no suene en el formulario
        KeyAscii = 0
    End If
End Sub

' Subrutina nueva y más clara para manejar la lógica de Alta Rápida
Sub VerificarYPrepararAltaRapida()
    ' Verificar si la lista de resultados está vacía (solo contiene el encabezado)
    Dim hayResultados As Boolean
    If Me.lstProductosAjuste.ListCount > 1 Then
         ' Si la primera fila de datos tiene un código, hay resultados
        If Nz(Me.lstProductosAjuste.List(1, 0)) <> "" Then
            hayResultados = True
        Else
            hayResultados = False
        End If
    Else
        hayResultados = False
    End If

    ' Si no hay resultados y hay texto en la búsqueda, activar Alta Rápida
    If Not hayResultados And Len(Trim$(Me.txtBuscarAjuste.Text)) > 0 Then
        ' Usar Nz para asegurar que no haya errores si el texto es nulo
        PrepararAltaRapida Trim$(Nz(Me.txtBuscarAjuste.Text))
    End If
End Sub

' Convierte Null a vacío para evitar errores en las listas
Private Function Nz(v As Variant, Optional rep As Variant = "") As Variant
    If IsError(v) Then
        Nz = rep
    ElseIf IsNull(v) Or IsEmpty(v) Then
        Nz = rep
    Else
        Nz = v
    End If
End Function

